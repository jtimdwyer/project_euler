"""
By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.

Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.
"""

from sympy import sieve, nextprime
from itertools import combinations

def digit_replacer(number, positions):
    """
    Given a number and a lister of  positions, 
    checks produces the 10 numbers obtained by substituting the same number in those spots. 
    
    CAVEAT : if 0 = positions[0], you can only do 9 substitiutions -- can't start a number with a 0

    """
    def star_replacer(index, char, positions):
        if index in positions:
            return "*"
        else:
            return char
    
    if positions[0] != 0:
        legal_digits = range(10)
    
    elif positions[0] == 0:
        legal_digits = range(1,10)

    number_star = ''.join([
        star_replacer(index, char, positions) for index, char in enumerate(str(number))
    ])
    number_replace = [int(number_star.replace('*', f'{i}') )for i in legal_digits]
    return number_replace


def prime_checker(sieve, length):    
    """
    Looks for primes that, when some digits are replaced with stars,
    and then the stars are all replaced with the same digit, generates
    a set of primes -- specifically length many primes
    """
    prime = 1
    while True:
        prime = nextprime(prime)
        total_positions = len(str(prime))
        
        #this loop takes care of the possibilities for the number of positons
        for num_positions in range(total_positions):
            
            #positions is a tuple of indexes which specify which digits to replace
            for positions in combinations(range(total_positions), r=num_positions):
                
                if positions:
                    
                    #replaced_nums will be a list of primes
                    #generated by the replacement process
                    replaced_nums = digit_replacer(prime, positions)
                    replaced_nums = [p for p in replaced_nums if p in sieve]
                    
                    #if the list is long enough, and the original prime is there
                    #then we're all set!
                    if len(replaced_nums) == length and prime in replaced_nums:
                        return prime
            
            
if __name__ == "__main__":
    print(prime_checker(sieve, 8))
    